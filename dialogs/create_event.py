import operator
from datetime import datetime, timedelta, date
from typing import Any
from zoneinfo import available_timezones

from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.widgets.kbd import Next, Back, Select, Calendar, CalendarConfig
from aiogram_dialog.widgets.text import Const, Format


class CreateEventDialog(StatesGroup):
    title = State() # —á—Ç–æ
    description = State() # –æ–ø–∏—Å–∞–Ω–∏–µ
    photo = State() # —Ñ–æ—Ç–æ
    city = State() # –≥–¥–µ
    datetime = State() # –¥–∞—Ç–∞/–≤—Ä–µ–º—è

def validate_text(title: str, min_letters: int, max_letters: int):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ title –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if title.replace(" ", "").isdigit():
        raise ValueError("üî¥ –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(title) < min_letters or len(title) > max_letters:
        raise ValueError(f"üî¥ –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>{min_letters} - {max_letters}</b> —Å–∏–º–≤–æ–ª–æ–≤")

async def error_text(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    await message.reply(str(error_), parse_mode=ParseMode.HTML)

async def handle_photo(message: Message, message_input: MessageInput, manager: DialogManager):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
    if message.photo:
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_id = photo.file_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ DialogManager (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ dialog_data)
        manager.dialog_data["photo_id"] = file_id
        await manager.next()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    else:
        await message.reply("üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")

async def available_cities(**kwargs):
    cities = [
        ("–ú–æ—Å–∫–≤–∞", '1'),
        ("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", '2'),
    ]
    return {
        "cities": cities,
        "count": len(cities),
    }

async def selected_city(callback: CallbackQuery, widget: Any, manager: DialogManager, city: str):
    manager.dialog_data["selected_city"] = city
    await manager.next()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
# calendar_config = CalendarConfig(
#    min_date=datetime.now().date(),
#    max_date=datetime.now().date() + timedelta(days=365)
# )

async def on_date_selected(callback: CallbackQuery, widget, manager: DialogManager, selected_date: date):
    if selected_date < datetime.now().date():
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await callback.answer("–ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!", show_alert=True)
    else:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
        manager.dialog_data["selected_date"] = selected_date
    await manager.next()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

dialog_create_event = Dialog(
    Window(
        Const('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        TextInput(
            id='title',
            type_factory=lambda x: validate_text(x, 5, 20),
            on_success=Next(),
            on_error=error_text,
        ),
        state=CreateEventDialog.title,
    ),
    Window(
        Const('–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        TextInput(
            id='description',
            type_factory=lambda x: validate_text(x, 20, 100),
            on_success=Next(),
            on_error=error_text,
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=CreateEventDialog.description,
    ),
    Window(
        Const('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        MessageInput(
            handle_photo,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
            # content_types=[ContentType.PHOTO],  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
            # filter=photo_filter
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=CreateEventDialog.photo,
    ),
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:'),
        Select(
            Format("{item[0]}"),
            id="s_cities",
            item_id_getter=operator.itemgetter(0),
            items="cities",
            on_click=selected_city,
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        getter=available_cities,
        state=CreateEventDialog.city,
    ),
    Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        Calendar(
            id='event_calendar',
            on_click=on_date_selected
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=CreateEventDialog.datetime,
    ),
)