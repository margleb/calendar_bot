import operator
from datetime import datetime, date
from typing import Any

from aiogram.dispatcher.middlewares.user_context import EventContext
from aiogram.enums import ContentType, ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.api.entities import MediaId, MediaAttachment
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.widgets.kbd import Next, Back, SwitchTo, Select, Calendar
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Jinja, Format


class CreateEventDialog(StatesGroup):
    title = State() # —á—Ç–æ
    description = State() # –æ–ø–∏—Å–∞–Ω–∏–µ
    photo = State() # —Ñ–æ—Ç–æ
    city = State() # –≥–¥–µ
    date = State() # –¥–∞—Ç–∞
    result = State() # —Å–æ–±—ã—Ç–∏–µ

async def get_event_data(dialog_manager: DialogManager, event_context: EventContext, **kwargs) -> dict:
    city = dialog_manager.dialog_data['city']
    date_event = dialog_manager.dialog_data['selected_date']
    image_id = dialog_manager.dialog_data['photo']  # Your file_id
    image = MediaAttachment(ContentType.PHOTO, file_id=MediaId(image_id))
    username = event_context.chat.username  # –ø–æ–ª—É—á–∞–µ–º username
    return {
        'title': dialog_manager.find('title').get_value(),
        'description': dialog_manager.find('description').get_value(),
        'photo': image,
        'city': city,
        'date': date_event,
        'username': username
    }

async def handle_photo(message: Message, message_input: MessageInput, manager: DialogManager):
    if message.photo:
        manager.dialog_data['photo'] = message.photo[-1].file_id
        await manager.next()
    else:
        await message.reply('üî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')

async def on_date_selected(callback: CallbackQuery, widget, manager: DialogManager, selected_date: date):
    if selected_date < datetime.now().date():
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await callback.answer("–ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.", show_alert=True)
    else:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
        manager.dialog_data["selected_date"] = selected_date
    await manager.next()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

async def selected_city(callback: CallbackQuery, widget: Any, manager: DialogManager, city: str):
    manager.dialog_data['city'] = city
    await manager.next()

def validate_text(title: str, min_letters: int, max_letters: int) -> str:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if title.replace(" ", "").isdigit():
        raise ValueError("üî¥ –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(title) < min_letters or len(title) > max_letters:
        raise ValueError(f"üî¥ –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>{min_letters} - {max_letters}</b> —Å–∏–º–≤–æ–ª–æ–≤")
    return title

async def error_text(
        message: Message,
        dialog_: Any,
        manager: DialogManager,
        error_: ValueError
):
    await message.reply(str(error_), parse_mode=ParseMode.HTML)

dialog_create_event = Dialog(
    Window(
        Const('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        TextInput(
            id='title',
            type_factory=lambda x: validate_text(x, 5, 20),
            on_error=error_text,
            on_success=Next()
        ),
        state=CreateEventDialog.title
    ),
    Window(
        Const('–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        TextInput(
            id='description',
            type_factory=lambda x: validate_text(x, 15, 150),
            on_error=error_text,
            on_success=Next()
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=CreateEventDialog.description
    ),
    Window(
        Const('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        MessageInput(
            handle_photo,  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=CreateEventDialog.photo,
    ),
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:'),
        Select(
            Format("{item}"),
            id='city',
            item_id_getter=lambda x: x,
            items=['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
            on_click=selected_city
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=CreateEventDialog.city
    ),
    Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'),
        Calendar(
            id='calendar',
            on_click=on_date_selected
        ),
        Back(Const('–ù–∞–∑–∞–¥')),
        state=CreateEventDialog.date,
    ),
    Window(
        DynamicMedia("photo"),
        Jinja(
            "\n\n"
            "{{description}}\n\n"
            "<b>______</b>\n"
            "<b>–ß—Ç–æ</b> {{title}}\n"
            "<b>–ì–¥–µ:</b> {{city}}\n"
            "<b>–î–∞—Ç–∞:</b> {{date}}\n"
            "<b>–ü–∏—à–∏—Ç–µ:</b> @{{username}}\n"
        ),
        parse_mode="HTML",
        getter=get_event_data,
        state=CreateEventDialog.result
    ),
)